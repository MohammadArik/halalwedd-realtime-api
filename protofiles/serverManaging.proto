syntax="proto3";

package serverManagingService;

option go_package = "/serverManagingService";


/*----- Common proto objects among the services and RPCs -----*/

// The general proto message for handling server data(to be used in an array while storing/transaction)
message ServerData {
    int32 InternalID = 1;
    string Public_IP = 2;
    string Private_IP = 3;
}

/*----- The Server Handling Service -----*/

/* The PublishServer RPC reltaed proto objects */

// The server-type enum
enum SERVER_TYPE {
    NOT_PROVIDED = 0;
    REALTIME = 1;
    INTERACTION = 2;
    DATA = 3;
}

// The PublishServer RPC's request message
message PublishServerReq {
    SERVER_TYPE Type = 1;
    string Public_IP = 2;
    string Private_IP = 3;
}

// The PublishServer RPC's response message
message PublishServerRes {
    string Message = 1;
    int32 InternalID = 2;
    map<int32, ServerData> ServerData = 3;
}

/* The NotifyExit RPC related proto objects */
// Exit types enum
enum EXIT_TYPE {
    NORMAL = 0;
    ERROR = 1;
}

// The NotifyExit RPC's request message
message NotifyExitReq {
    EXIT_TYPE Type = 1;
    SERVER_TYPE SType = 2;
    int32 InternalID = 3;
    string PublicIP = 4;
}

// The NotifyExit RPC's response message
message NotifyExitRes {
    string Message = 1;
}
// The gRPC service definition of "Server Handling Service" which stores and verifies servers' data 
//  and makes their data available to each other for them to inter-communicate.
// Server: Managing-Server | Client: Data/Interaction/Realtime API servers
service ServerHandling {
    rpc PublishServer(PublishServerReq) returns (PublishServerRes);
    rpc NotifyExit(NotifyExitReq) returns (NotifyExitRes);
}


/*----- The Edge-Server Connectivity Service -----*/ 

/* PingServer RPC related proto objects */

// PingServer RPC's Request Message
message PingReq {
    string Ping = 1;
}
// PingServer RPC's Response Message
message PingRes {
    string Pong = 1;
}


/* VerifyServer RPC related proto objects */

// Verify RPC's Request Message
message VerifyReq {
    string Challenge = 1;
}
// Verify RPC's Response Message
message VerifyRes {
    string Result = 1;
}


/* DataUpdate(server data) RPC related proto objects */

// Update type enum
enum UPDATE_TYPE {
    New = 0;
    Change = 1;
    Remove = 2;
}

// DataUpdate RPC's Request Message
message DataUpdateReq {
    UPDATE_TYPE Type = 1;
    int32 ChangedServerID = 2;
    ServerData ServerData = 3;
}
// DataUpdate RPC's Response Message
message DataUpdateRes {
    string Message = 1;
}

// The gRPC service of "Edge Server Connectivity Service" which is used to check/verify/update the servers
//  while and after publishing. It also used to receive updates about peer servers.
// Server: Data/Interaction/Realtime API servers | Client: Managing-Server
service EdgeServerConnectivity {
    rpc PingServer(PingReq) returns (PingRes);
    rpc VerifyServer(VerifyReq) returns (VerifyRes);
    rpc DataUpdate(DataUpdateReq) returns (DataUpdateRes);
}
