// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package serverConnection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerCheckingClient is the client API for ServerChecking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerCheckingClient interface {
	PingServer(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckRes, error)
	VerifyServer(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRes, error)
	DataUpdate(ctx context.Context, in *ServerInfoUpdate, opts ...grpc.CallOption) (*DataUpdateRes, error)
}

type serverCheckingClient struct {
	cc grpc.ClientConnInterface
}

func NewServerCheckingClient(cc grpc.ClientConnInterface) ServerCheckingClient {
	return &serverCheckingClient{cc}
}

func (c *serverCheckingClient) PingServer(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckRes, error) {
	out := new(CheckRes)
	err := c.cc.Invoke(ctx, "/halalwedd_managing_server.serverChecking/pingServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCheckingClient) VerifyServer(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthRes, error) {
	out := new(AuthRes)
	err := c.cc.Invoke(ctx, "/halalwedd_managing_server.serverChecking/verifyServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCheckingClient) DataUpdate(ctx context.Context, in *ServerInfoUpdate, opts ...grpc.CallOption) (*DataUpdateRes, error) {
	out := new(DataUpdateRes)
	err := c.cc.Invoke(ctx, "/halalwedd_managing_server.serverChecking/dataUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerCheckingServer is the server API for ServerChecking service.
// All implementations must embed UnimplementedServerCheckingServer
// for forward compatibility
type ServerCheckingServer interface {
	PingServer(context.Context, *CheckReq) (*CheckRes, error)
	VerifyServer(context.Context, *AuthReq) (*AuthRes, error)
	DataUpdate(context.Context, *ServerInfoUpdate) (*DataUpdateRes, error)
	mustEmbedUnimplementedServerCheckingServer()
}

// UnimplementedServerCheckingServer must be embedded to have forward compatible implementations.
type UnimplementedServerCheckingServer struct {
}

func (UnimplementedServerCheckingServer) PingServer(context.Context, *CheckReq) (*CheckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingServer not implemented")
}
func (UnimplementedServerCheckingServer) VerifyServer(context.Context, *AuthReq) (*AuthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyServer not implemented")
}
func (UnimplementedServerCheckingServer) DataUpdate(context.Context, *ServerInfoUpdate) (*DataUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataUpdate not implemented")
}
func (UnimplementedServerCheckingServer) mustEmbedUnimplementedServerCheckingServer() {}

// UnsafeServerCheckingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerCheckingServer will
// result in compilation errors.
type UnsafeServerCheckingServer interface {
	mustEmbedUnimplementedServerCheckingServer()
}

func RegisterServerCheckingServer(s grpc.ServiceRegistrar, srv ServerCheckingServer) {
	s.RegisterService(&ServerChecking_ServiceDesc, srv)
}

func _ServerChecking_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCheckingServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halalwedd_managing_server.serverChecking/pingServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCheckingServer).PingServer(ctx, req.(*CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerChecking_VerifyServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCheckingServer).VerifyServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halalwedd_managing_server.serverChecking/verifyServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCheckingServer).VerifyServer(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerChecking_DataUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCheckingServer).DataUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halalwedd_managing_server.serverChecking/dataUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCheckingServer).DataUpdate(ctx, req.(*ServerInfoUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerChecking_ServiceDesc is the grpc.ServiceDesc for ServerChecking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerChecking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "halalwedd_managing_server.serverChecking",
	HandlerType: (*ServerCheckingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "pingServer",
			Handler:    _ServerChecking_PingServer_Handler,
		},
		{
			MethodName: "verifyServer",
			Handler:    _ServerChecking_VerifyServer_Handler,
		},
		{
			MethodName: "dataUpdate",
			Handler:    _ServerChecking_DataUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/serverConnectionService.proto",
}
